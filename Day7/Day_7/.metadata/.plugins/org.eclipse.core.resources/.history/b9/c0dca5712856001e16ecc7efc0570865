#include<iostream>
#include<string>
using namespace std;

namespace exception{
	class IllegalArgumentException{
	private:
		string message;
	public:
		IllegalArgumentException( string message = "Invalid argument" ){
			this->message = message;
		}
		string getMessage( void )const{
			return this->message;
		}
	};
}

using namespace exection;

namespace nutil{
	class Complex{
	private:
		int real;
		int imag;
	public:
		Complex( int real = 0, int imag  = 0 ){
			this->real = real;
			this->imag = imag;
		}
		int getReal( void )const{
			return this->real;
		}
		void setReal( const int real ){
			if( real < 0 )
				throw IllegalArgumentException("");
			this->real = real;
		}
		int getImag( void )const{
			return this->imag;
		}
		void setImag( const int imag ){
			this->imag = imag;
		}
	};
}
int main( void ){
	using namespace nutil;
	Complex c1;
	c1.setReal( 10 );
	c1.setImag( 20 );
	cout << c1.getReal( ) <<endl;
	cout << c1.getImag( ) <<endl;
	return 0;
}
